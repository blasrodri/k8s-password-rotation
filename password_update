#! /bin/env bash

set -e

NUM_CHARS_PW=16
K8s_NAMESPACE=default

POSTGRES_HOST="<POSTGRES_HOST_IN_HERE>"

PASSIVE_SECRET_NAME="PASSIVE_SECRET_NAME"
ACTIVE_SECRET_NAME="ACTIVE_SECRET_NAME"

function usage() {
    echo "Password update for a deployment depending on a Postgres Database."
    echo "password_update [options] deployment_name"
    echo ""
    echo "    -n,--namespace"
    echo "    kubernetes namespace"
    echo "    -nc,--num-chars"
    echo "    number of characters that the password will have. Default is 8"
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -h|--help)
        usage
        exit 0
    ;;
    -n|--namespace)
    K8s_NAMESPACE="$2"
    shift # past argument
    shift # past value
    ;;
    -nc|--num-chars)
    NUM_CHARS_PW="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done

DEPLOYMENT_NAME=$key


function gen_8char_passwd() {
    new_passwd=$new_passwd$(pwgen -1)
    echo "${new_passwd}"
}

function gen_passwd() {
  num_iterations=$((NUM_CHARS_PW / 8))
  for _ in $(seq 1 $num_iterations)
  do
    a=$(gen_8char_passwd)
    passwd=$passwd$a
  done
  echo -n "${passwd}" | base64
}

function deployment_exists() {
    if ! kubectl get deployment "${DEPLOYMENT_NAME}" -n "${K8s_NAMESPACE}"  &>/dev/null
    then
        echo "Deployment ${DEPLOYMENT_NAME} not found"
        exit 1
    fi
}

function secret_exists() {
    secret_name=$(get_passive_secret_name)

    if ! kubectl get "secrets/$secret_name" -n "${K8s_NAMESPACE}" &>/dev/null
    then
        echo "Secret ${secret_name} not found"
        exit 1
    fi
}

function get_username_from_secret(){
    if ! kubectl get secrets "${secret_name}" -o json \
            | jq -r ".data[\"username\"]" | base64 -d
    then
        echo "Could not retrieve the username"
        exit 1
    fi
        kubectl get secrets "${secret_name}" -o json \
            | jq -r ".data[\"username\"]" | base64 -d
}
function update_pg_password(){
    psql --host="${POSTGRES_HOST}" -U root postgres \
         -c "ALTER USER \"${username}\" WITH PASSWORD '${decoded_gen_passwd}';"
}

function update_password_in_secret(){
    if ! kubectl get secrets "${secret_name}" -o json \
        | jq ".data[\"password\"] |= \"${generated_passwd}\"" \
        | kubectl apply -f -
    then
        echo "Could not update the password"
        exit 1
    fi
    echo "Password updated for ${secret_name}"
}
function perform_checks() {
    deployment_exists
    secret_exists
}

function update_pgpass() {
    sed -i "s/${username}:.*/${username}:${decoded_gen_passwd}/" ~/.pgpass
}


function update_password_in_secret(){
    if ! kubectl get secrets "${secret_name}" -o json \
        | jq ".data[\"password\"] |= \"${generated_passwd}"\" \
        | kubectl apply -f -
    then
        echo "Could not update the password"
        exit 1
    fi
    echo "Password updated for $secret_name"
}

function get_passive_secret_name() {
    kubectl get deployment "${DEPLOYMENT_NAME}" -n "${K8s_NAMESPACE}" -o json \
        | jq -r "(.spec.template.spec.containers[].env[]? | select (.name == \"${PASSIVE_SECRET_NAME}\") | .value )"
}

function get_active_secret_name() {
    kubectl get deployment "${DEPLOYMENT_NAME}" -n "${K8s_NAMESPACE}" -o json \
        | jq -r "(.spec.template.spec.containers[].env[]? | select (.name == \"${ACTIVE_SECRET_NAME}\") | .value )"
}

function swap_passive_and_active_secret_names() {
    kubectl get deployment "${DEPLOYMENT_NAME}" -n "${K8s_NAMESPACE}" -o json \
        | jq "(.spec.template.spec.containers[].env[]? | select (.name == \"${ACTIVE_SECRET_NAME}\") | .value) |= \"${passive_secret_name}\"" | \
        kubectl apply -f -
    kubectl wait --for=condition=Available deployment "${DEPLOYMENT_NAME}" -n "${K8s_NAMESPACE}"
    kubectl get deployment "${DEPLOYMENT_NAME}" -n "${K8s_NAMESPACE}" -o json \
        | jq "(.spec.template.spec.containers[].env[]? | select (.name == \"${PASSIVE_SECRET_NAME}\") | .value) |= \"${active_secret_name}\"" | \
        kubectl apply -f -
}

function run() {
    active_secret_name=$(get_active_secret_name)
    passive_secret_name=$(get_passive_secret_name)
    secret_name=${passive_secret_name}
    username=$(get_username_from_secret)
    generated_passwd=$(gen_passwd)
    decoded_gen_passwd=$(echo -n "${generated_passwd}" | base64 -d )
    update_pg_password
    update_password_in_secret
    update_pgpass
    swap_passive_and_active_secret_names
}

perform_checks
run
